version: "3.4"

# Do not edit this file directly. Use a ‘docker-compose.override.yaml’ file if you can.
# Refer to `docker-compose.override.yaml.example’ for some sample configurations.

services:
  api:
    container_name: LibreChat
#    ports:
#      - 3080:3080               # Change it to 9000:3080 to use nginx
    depends_on:
      - mongodb
    image: librechat
    build:
      context:
      target: node
    networks:
      - internal_network
    restart: always
    user: "${UID}:${GID}"
    extra_hosts:
    - "host.docker.internal:host-gateway"
    env_file:
      - .env
    environment:
      - HOST=0.0.0.0
      - MONGO_URI=mongodb://mongodb:27017/LibreChat
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_HTTP_ADDR=meilisearch:7700
      - GLOBAL_AGENT_HTTP_PROXY=${PROXY}
    volumes:
      - /app/client/node_modules
      - /app/api/node_modules
      - ./api:/app/api
      - ./.env:/app/.env
      - ./.env.development:/app/.env.development
      - ./.env.production:/app/.env.production
      - ./images:/app/client/public/images
  mongodb:
    container_name: chat-mongodb
    image: mongo
    networks:
      - internal_network
    restart: always
    user: "${UID}:${GID}"
    volumes:
      - ./data-node:/data/db
    command: mongod --noauth
  meilisearch:
    container_name: chat-meilisearch
    image: getmeili/meilisearch:v1.5
    networks:
      - internal_network
    restart: always
    env_file:
      - .env
    user: "${UID}:${GID}"
    environment:
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_HTTP_ADDR=meilisearch:7700
      - MEILI_NO_ANALYTICS=true
    volumes:
      - ./meili_data_v1.5:/meili_data

  # forwoard proxy for network analysis
  mitmproxy:
    depends_on:
      - api
    build: ./proxy/mitmproxy
    networks:
      - internal_network
      - bridge_network
    ports:
      - 8081:8081
      - 8080:8080
#    command: mitmweb --mode upstream:http://**** --upstream-auth ***:*** -k  --web-host 0.0.0.0
    command: mitmweb -k --web-host 0.0.0.0

  # forwoard proxy for regular use
  squid:
    depends_on:
      - api
    hostname: squid
    image: ubuntu/squid
    networks:
      - internal_network
      - bridge_network
    ports:
      - 3128:3128

  # reverse proxy
  haproxy:
    depends_on:
      - api
    image: haproxy:latest
    restart: unless-stopped
    volumes:
      - ./proxy/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./proxy/haproxy/cert.pem/:/cert/cert.pem:ro
      - ./proxy/haproxy/cert.pem.key/:/cert/cert.pem.key:ro
    ports:
      - "443:443"
      - "80:80"
    networks:
      - internal_network
      - bridge_network

networks:
  internal_network:
    driver: bridge
    internal: true

  bridge_network:
    driver: bridge